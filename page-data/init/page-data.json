{
    "componentChunkName": "component---src-templates-lesson-template-js",
    "path": "/init",
    "result": {"data":{"markdownRemark":{"html":"<p>So let's write JS! We're a few sections in, it's about time we wrote some JS!</p>\n<p>Add a file inside of <code class=\"language-text\">src</code> called <code class=\"language-text\">init.js</code>. In there let's get the guts going.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token constant\">TICK_RATE</span> <span class=\"token operator\">=</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">tick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"tick\"</span><span class=\"token punctuation\">,</span> Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"starting game\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">let</span> nextTimeToTick <span class=\"token operator\">=</span> Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">nextAnimationFrame</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> now <span class=\"token operator\">=</span> Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nextTimeToTick <span class=\"token operator\">&lt;=</span> now<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">tick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      nextTimeToTick <span class=\"token operator\">=</span> now <span class=\"token operator\">+</span> <span class=\"token constant\">TICK_RATE</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">requestAnimationFrame</span><span class=\"token punctuation\">(</span>nextAnimationFrame<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">nextAnimationFrame</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>This is a game. A game with a time component. We have a fox that's going to be doing something over a period of time. We <em>could</em> do this with a series of <code class=\"language-text\">setInterval</code> and <code class=\"language-text\">setTimeout</code> calls but let me promise you only tears lay down that path. It is very difficult to get those times to line up well.</p>\n<p>Let me introduce you to <code class=\"language-text\">requestAnimationFrame</code>. This is a technique where we can say to the browser, \"Hey! Browser! Next time you have an idle moment, call me ðŸ˜‰\" complete with winky face. As you may imagine, this can be very frequent, and we don't want our to execute at lightspeed. So in this case, we're saying, \"check to see if it's been 3 seconds. If it has, call <code class=\"language-text\">tick</code>. If not, chill and wait for the next frame. This way, we're guaranteed to run <code class=\"language-text\">tick</code> every three seconds, give or take a few milliseconds (since the browser will wait until it's idle to call.)</p>\n<p>Head to your <code class=\"language-text\">index.html</code>, add the line <code class=\"language-text\">&lt;script src=\"./init.js\">&lt;/script></code> in there. This will let Parcel know that this is the entry to your JS app. You won't have to do this again.</p>\n<p>If you try to run your code right now, it's very likely you'll get a gross error saying <code class=\"language-text\">regeneratorRuntime is not defined</code>. We need to tell Babel (which Parcel uses under the hood) to not transpile our <code class=\"language-text\">async</code> call and to leave it as async since modern Edge/Firefox/Safari/Chrome can understand async/await. So head to your package.json and add this:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">[</span>â€¦<span class=\"token punctuation\">]</span>\n  <span class=\"token property\">\"browserslist\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">\"last 2 Firefox versions\"</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This lets Babel know to just make this project work for the last two versions of Firefox and to not transpile things that would work in Firefox. You can use Chrome too. Go ahead and run <code class=\"language-text\">rm -rf .cache dist</code> in your project. When you change configurations, Parcel doesn't always grasp it. Just do it to be safe; your project will take an extra second to compile but it should work now.</p>\n<p>Now you should see it ticking every three seconds! This give us a nice frame to work with!</p>","frontmatter":{"path":"/init","title":"Init the Project","order":"3B","section":"Architecture","description":"The Project"}},"allMarkdownRemark":{"edges":[{"node":{"frontmatter":{"order":"2B","path":"/build-process","title":"Build Process"}}},{"node":{"frontmatter":{"order":"2D","path":"/code-formatting","title":"Code Formatting"}}},{"node":{"frontmatter":{"order":"2C","path":"/code-style","title":"Code Style"}}},{"node":{"frontmatter":{"order":"5A","path":"/conclusion","title":"Wrapping Up"}}},{"node":{"frontmatter":{"order":"4G","path":"/death","title":"Death"}}},{"node":{"frontmatter":{"order":"2E","path":"/editor-setup","title":"Editor Setup"}}},{"node":{"frontmatter":{"order":"2A","path":"/hello-world","title":"Hello World"}}},{"node":{"frontmatter":{"order":"3B","path":"/init","title":"Init the Project"}}},{"node":{"frontmatter":{"order":"4B","path":"/interacting-with-the-ui","title":"Interacting with the UI"}}},{"node":{"frontmatter":{"order":"1A","path":"/intro","title":"Introduction"}}},{"node":{"frontmatter":{"order":"2F","path":"/linting","title":"Linting"}}},{"node":{"frontmatter":{"order":"3A","path":"/organization","title":"Organizing Your Code"}}},{"node":{"frontmatter":{"order":"4E","path":"/pooping","title":"Pooping"}}},{"node":{"frontmatter":{"order":"4A","path":"/some-ui","title":"Some UI"}}},{"node":{"frontmatter":{"order":"3C","path":"/state-machine","title":"State Machine"}}},{"node":{"frontmatter":{"order":"2G","path":"/testing","title":"Testing"}}},{"node":{"frontmatter":{"order":"4D","path":"/transitioning-between-states","title":"Transitioning Between States"}}},{"node":{"frontmatter":{"order":"2H","path":"/type-checking","title":"Type Checking"}}},{"node":{"frontmatter":{"order":"4C","path":"/the-states","title":"The States"}}},{"node":{"frontmatter":{"order":"1B","path":"/the-project","title":"The Project"}}}]}},"pageContext":{}},
    "staticQueryHashes": ["2959687377"]}