{
    "componentChunkName": "component---src-templates-lesson-template-js",
    "path": "/code-formatting",
    "result": {"data":{"markdownRemark":{"html":"<h2 id=\"code-formatting\" style=\"position:relative;\"><a href=\"#code-formatting\" aria-label=\"code formatting permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Code formatting</h2>\n<p>Literally my favorite JavaScript project is <a href=\"https://prettier.io/\">Prettier</a>. You can probably tell because it is in <em>all</em> of my courses. Prettier allows you to define of how you code is formatted: tabs or spaces, two or four spaces, semi-colons or not, single or double quotes, etc. It then <em>automatically</em> formats your code for you, meaning you get to shut down the \"thread\" of your brain that worries about formatting your code and just focus on problem solving. Beyond that, you get to stop <a href=\"https://en.wiktionary.org/wiki/bikeshedding\">bikeshedding</a> about these rules with your co-workers since the formatter works the same for everyone. Let's add it to our project!</p>\n<p>Run the following!</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> -D prettier</code></pre></div>\n<p>Then add this file to the root of the project and call it <code class=\"language-text\">.prettierrc</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>This is where you would configure Prettier's options but we're just going to use all the defaults. Feel free to poke around the Prettier website if you want to configure it.</p>\n<p>Add the following two commands to your npm scripts:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">[</span>…<span class=\"token punctuation\">]</span>\n  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span>…<span class=\"token punctuation\">]</span>\n    <span class=\"token property\">\"format\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"prettier --ignore-path ./.gitignore --write \\\"./**/*.{html,json,js,ts,css}\\\"\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"format:check\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"prettier --ignore-path ./.gitignore --check \\\"./**/*.{html,json,js,ts,css}\\\"\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>So we added two commands: one that will fix all of our problems, and one that will check for problems. The former is the one we use before we commit code to reformat everything. The latter we could make run in a CI/CD (continuous integration / continuous delivery) platform like Azure Pipelines, GitHub Actions, Travis CI, etc. to make sure all code is formatted with Prettier before we deploy it. This is what I was talking about \"being automated\". Now we can make the enforcement of our code style automatic.</p>\n<p>Notice the <code class=\"language-text\">--ignore-path</code> too. Normally we'd make a <code class=\"language-text\">.prettierignore</code> file with our wanted paths to ignore (we don't want to format nor check files that are machine-generated, just the ones we write outselves) but our <code class=\"language-text\">.gitignore</code> is actually the same so it works perfectly and we can use the one file for both purposes.</p>\n<h2 id=\"integration-with-vscode\" style=\"position:relative;\"><a href=\"#integration-with-vscode\" aria-label=\"integration with vscode permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Integration with VSCode</h2>\n<p>We write the above commands in case we're working with a team member that doesn't want to use the same setup we are. They can always run <code class=\"language-text\">npm run format</code> and everything will work. But we can be even more efficient. In VSCode, <a href=\"https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode\">install this extension</a>.</p>\n<p>Now we can set up Prettier to run Prettier every single time we save, meaning we never have to think about running the npm command. It just happens! It's very convenient. Once the extension is installed, I want you to go change two settings in VSCode.</p>\n<p>First one is <code class=\"language-text\">Editor: Format on Save</code>. This will cause the formatter to run every time you save. The next one is <code class=\"language-text\">Prettier: Require Config</code>. This will make it so Prettier will only run on projects that have a <code class=\"language-text\">.prettierrc</code> so you don't have to worry about turing the extension on and off. Now every time you save it'll run Prettier!</p>","frontmatter":{"path":"/code-formatting","title":"Code Formatting","order":"2D","section":"Frontend Infra","description":"The Project"}},"allMarkdownRemark":{"edges":[{"node":{"frontmatter":{"order":"2B","path":"/build-process","title":"Build Process"}}},{"node":{"frontmatter":{"order":"2D","path":"/code-formatting","title":"Code Formatting"}}},{"node":{"frontmatter":{"order":"2C","path":"/code-style","title":"Code Style"}}},{"node":{"frontmatter":{"order":"5A","path":"/conclusion","title":"Wrapping Up"}}},{"node":{"frontmatter":{"order":"4G","path":"/death","title":"Death"}}},{"node":{"frontmatter":{"order":"2E","path":"/editor-setup","title":"Editor Setup"}}},{"node":{"frontmatter":{"order":"2A","path":"/hello-world","title":"Hello World"}}},{"node":{"frontmatter":{"order":"3B","path":"/init","title":"Init the Project"}}},{"node":{"frontmatter":{"order":"4B","path":"/interacting-with-the-ui","title":"Interacting with the UI"}}},{"node":{"frontmatter":{"order":"1A","path":"/intro","title":"Introduction"}}},{"node":{"frontmatter":{"order":"2F","path":"/linting","title":"Linting"}}},{"node":{"frontmatter":{"order":"3A","path":"/organization","title":"Organizing Your Code"}}},{"node":{"frontmatter":{"order":"4E","path":"/pooping","title":"Pooping"}}},{"node":{"frontmatter":{"order":"4A","path":"/some-ui","title":"Some UI"}}},{"node":{"frontmatter":{"order":"3C","path":"/state-machine","title":"State Machine"}}},{"node":{"frontmatter":{"order":"2G","path":"/testing","title":"Testing"}}},{"node":{"frontmatter":{"order":"4D","path":"/transitioning-between-states","title":"Transitioning Between States"}}},{"node":{"frontmatter":{"order":"2H","path":"/type-checking","title":"Type Checking"}}},{"node":{"frontmatter":{"order":"4C","path":"/the-states","title":"The States"}}},{"node":{"frontmatter":{"order":"1B","path":"/the-project","title":"The Project"}}}]}},"pageContext":{}},
    "staticQueryHashes": ["2959687377"]}