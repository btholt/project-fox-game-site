{"version":3,"file":"component---src-pages-index-js-d5a45a32ff7a89189433.js","mappings":"kNAKMA,E,QAASC,EA+Cf,EA7CmB,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,QAASC,EAAY,EAAZA,MAC7BC,QAAQC,IAAIL,GAEZ,IAAMM,EAAWJ,EACdK,KAAI,SAAAC,GAAM,OAAIA,EAAOC,KAAKC,eAC1BC,KAAKX,GACLY,QAAO,SAACC,EAAKL,GACZ,OAAKK,EAAIC,QAKWD,EAAIA,EAAIC,OAAS,GAAG,GAAGC,QAAQC,MAAM,KAAK,KAC1CR,EAAOO,QAAQC,MAAM,KAAK,GAC5CH,EAAIA,EAAIC,OAAS,GAAGG,KAAKT,GAEzBK,EAAII,KAAK,CAACT,IAGLK,IAXLA,EAAII,KAAK,CAACT,IACHK,KAWR,IAEL,OACE,uBAAKK,UAAU,aACb,sBAAIA,UAAU,yBAAyBf,GACvC,uBAAKe,UAAU,kBACb,sBAAIA,UAAU,iBACXZ,EAASC,KAAI,SAAAQ,GAAO,OACnB,sBAAII,IAAKJ,EAAQ,GAAGA,SAClB,sBAAIG,UAAU,wBAAwBH,EAAQ,GAAGA,SACjD,0BACGA,EAAQR,KAAI,SAAAC,GAAM,OACjB,sBAAIW,IAAKX,EAAOY,MACd,gBAAC,UAAD,CAAMC,GAAIb,EAAOY,MAAOZ,EAAOL,oBCUnD,EA5CkB,kBAChB,gBAAC,KAAD,CACEmB,MAAK,aA0BLC,OAAQ,SAAAC,GAAK,OACX,uBAAKN,UAAU,SACb,uBAAKA,UAAU,sBACb,0BAAKM,EAAMC,KAAKC,aAAavB,OAC7B,0BAAKqB,EAAMC,KAAKC,aAAaC,WAG/B,gBAAC,EAAD,CACExB,MAAM,oBACND,QAASsB,EAAMI,kBAAkBC,c,iBC3C3C,SAASC,EAAcC,GAIrB,IAHyB,cAGHC,KAAKD,GACzB,MAAM,IAAIE,MACLF,EADC,8GAKR,MAAO,CARc,OAQAG,KAAKH,GAAK,GAPV,UAO2BG,KAAKH,GAAK,IAG5D,IAAMI,EAAe,SAAAJ,GAAG,OACtBA,EACGf,MAAM,IACNT,KAAI,SAAC6B,EAAMC,GAAP,OAAiBD,EAAKE,WAAW,GAAhB,SAAqB,GAAMD,MAChDzB,QAAO,SAACC,EAAK0B,GAAN,OAAgB1B,EAAM0B,MA0BlCC,EAAOC,QAAQ,EAxBf,SAAgBC,EAAGC,GACjB,IAAIC,EAAQC,EAERH,EAAEI,YAAcJ,EAAEI,WAAWC,OAC/BH,EAASF,EAAEI,WAAWC,MACtBF,EAASF,EAAEG,WAAWC,QAEtBH,EAASF,EAAEK,MACXF,EAASF,EAAEI,OAGb,MAAqBjB,EAAcc,GAA5BI,EAAP,KAAaC,EAAb,KACA,EAAqBnB,EAAce,GAA5BK,EAAP,KAAaC,EAAb,KAGA,OAAIH,IAASE,EACJF,EAAOE,EAITf,EAAac,GAAQd,EAAagB","sources":["webpack://project-fox-game-site/./src/components/TOCCard.js","webpack://project-fox-game-site/./src/pages/index.js","webpack://project-fox-game-site/./src/util/helpers.js"],"sourcesContent":["import React from \"react\";\nimport Link from \"gatsby-link\";\nimport * as helpers from \"../util/helpers\";\nimport \"./TOCCard.css\";\n\nconst sortFn = helpers.sorter;\n\nconst LessonCard = ({ content, title }) => {\n  console.log(sortFn);\n\n  const sections = content\n    .map(lesson => lesson.node.frontmatter)\n    .sort(sortFn)\n    .reduce((acc, lesson) => {\n      if (!acc.length) {\n        acc.push([lesson]);\n        return acc;\n      }\n\n      const lastSection = acc[acc.length - 1][0].section.split(\",\")[0];\n      if (lastSection === lesson.section.split(\",\")[0]) {\n        acc[acc.length - 1].push(lesson);\n      } else {\n        acc.push([lesson]);\n      }\n\n      return acc;\n    }, []);\n\n  return (\n    <div className=\"main-card\">\n      <h1 className=\"lesson-title gradient\">{title}</h1>\n      <div className=\"lesson-content\">\n        <ol className=\"sections-name\">\n          {sections.map(section => (\n            <li key={section[0].section}>\n              <h3 className=\"lesson-section-title\">{section[0].section}</h3>\n              <ol>\n                {section.map(lesson => (\n                  <li key={lesson.path}>\n                    <Link to={lesson.path}>{lesson.title}</Link>\n                  </li>\n                ))}\n              </ol>\n            </li>\n          ))}\n        </ol>\n      </div>\n    </div>\n  );\n};\n\nexport default LessonCard;\n","import React from \"react\";\nimport { StaticQuery, graphql } from \"gatsby\";\nimport Card from \"../components/TOCCard\";\n\nimport \"./index.css\";\n\nconst IndexPage = () => (\n  <StaticQuery\n    query={graphql`\n      query HomepageTOC {\n        site {\n          siteMetadata {\n            title\n            subtitle\n            description\n            keywords\n          }\n        }\n        allMarkdownRemark(sort: { order: ASC, fields: [frontmatter___order] }) {\n          edges {\n            node {\n              id\n              frontmatter {\n                order\n                path\n                title\n                section\n                description\n              }\n            }\n          }\n        }\n      }\n    `}\n    render={props => (\n      <div className=\"index\">\n        <div className=\"jumbotron gradient\">\n          <h1>{props.site.siteMetadata.title}</h1>\n          <h2>{props.site.siteMetadata.subtitle}</h2>\n        </div>\n\n        <Card\n          title=\"Table of Contents\"\n          content={props.allMarkdownRemark.edges}\n        />\n      </div>\n    )}\n  />\n);\n\nexport default IndexPage;\n","function splitSections(str) {\n  const validSectionTest = /^\\d+[A-Z]+$/;\n  const numbersRegex = /^\\d+/;\n  const lettersRegex = /[A-Z]+$/;\n  if (!validSectionTest.test(str)) {\n    throw new Error(\n      `${str} does not match the section format. It must be <numbers><capital letters>, like 16A or 5F (case sensitive)`\n    );\n  }\n\n  return [numbersRegex.exec(str)[0], lettersRegex.exec(str)[0]];\n}\n\nconst getCharScore = str =>\n  str\n    .split(\"\")\n    .map((char, index) => char.charCodeAt(0) * 10 ** index)\n    .reduce((acc, score) => acc + score);\n\nfunction sorter(a, b) {\n  let aOrder, bOrder;\n\n  if (a.attributes && a.attributes.order) {\n    aOrder = a.attributes.order;\n    bOrder = b.attributes.order;\n  } else {\n    aOrder = a.order;\n    bOrder = b.order;\n  }\n\n  const [aSec, aSub] = splitSections(aOrder);\n  const [bSec, bSub] = splitSections(bOrder);\n\n  // sections first\n  if (aSec !== bSec) {\n    return aSec - bSec;\n  }\n\n  // subsections next\n  return getCharScore(aSub) - getCharScore(bSub);\n}\n\nmodule.exports.splitSections = splitSections;\nmodule.exports.sorter = sorter;\n"],"names":["sortFn","helpers","content","title","console","log","sections","map","lesson","node","frontmatter","sort","reduce","acc","length","section","split","push","className","key","path","to","query","render","props","site","siteMetadata","subtitle","allMarkdownRemark","edges","splitSections","str","test","Error","exec","getCharScore","char","index","charCodeAt","score","module","exports","a","b","aOrder","bOrder","attributes","order","aSec","aSub","bSec","bSub"],"sourceRoot":""}